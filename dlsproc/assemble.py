# AUTOGENERATED! DO NOT EDIT! File to edit: 60_assemble.ipynb (unless otherwise specified).

__all__ = ['merge_deleted']

# Cell
import pathlib

import pandas as pd

# import dlsproc.xml
# import dlsproc.structure
import dlsproc.bundle
import dlsproc.hier

# Cell
def merge_deleted(data_df: pd.DataFrame, deleted_series: pd.Series) -> pd.DataFrame:

    # duplicates are dropped; in order to do so it is convenient to turn the `pd.Series` into a `pd.DataFrame` by calling
    # `reset_index`, which turns the *multiindex* into columns
    deduplicated_deleted_df = deleted_series.reset_index().drop_duplicates('id').set_index(['file name', 'id'])

    # in order to merge this new `pd.DataFrame` with `data_df` we need a *multiindex* for the former with the same number of levels as in the latter
    deduplicated_deleted_df.columns = col_multiindex = pd.MultiIndex.from_tuples([dlsproc.hier.pad_col_levels(data_df, ['deleted_on'])])

    # the `data_df` is (*left*-)joined with the new one yielding deleted entries; the result is a *stateful* `pd.DataFrame` in the sense that,
    # for every entry, we know its state: deleted or not; notice that `data_df`'s index is reset for easying the merge (assuming every contract
    # shows only once in `data_df`, *file name* and *id* should still provide a unique index...though it probably doesn't matter anyway)
    res = data_df.reset_index().set_index(['file name', 'id']).merge(deduplicated_deleted_df, how='left', on=['file name', 'id'])

    return res