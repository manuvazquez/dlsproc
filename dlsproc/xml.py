# AUTOGENERATED! DO NOT EDIT! File to edit: 10_xml.ipynb (unless otherwise specified).

__all__ = ['get_namespaces', 're_tag', 'split_namespace_tag', 'to_be_skipped', 'get_entries', 'datetime_format',
           'entry_to_dict', 'entry_to_series']

# Cell
import pathlib
import re
import datetime

import pandas as pd
from lxml import etree

# Cell
def get_namespaces(input_file: str | pathlib.Path, root_name: str = 'base') -> dict:

    tree = etree.parse(input_file)

    namespaces = tree.getroot().nsmap

    if None in namespaces:

        namespaces[root_name] = namespaces.pop(None)

    return namespaces

# Cell
re_tag = re.compile('\{(.*)\}(.*)')

# Cell
def split_namespace_tag(namespace_tag: str) -> str:
    return re_tag.match(namespace_tag).groups()

# Cell
to_be_skipped = ['author', 'id', 'link', 'title', 'updated', r'deleted-entry']
to_be_skipped

# Cell
def get_entries(root: etree.Element) -> list[etree.Element]:

    return [e for e in etree.parse(xml_file).getroot() if split_namespace_tag(e.tag)[1] == 'entry']

# Cell
datetime_format = '%Y-%m-%dT%H:%M:%S.%f%z'
# datetime_format_without_micro = '%Y-%m-%dT%H:%M:%S%z'

# Cell
def entry_to_dict(entry: etree.Element, recursive: bool = True) -> dict:

    res = {}

    # for every "child" of `entry` ...
    for e in entry:

        # ...the *namespace* and *tag* are extracted
        namespace, tag = split_namespace_tag(e.tag)

        # for the sake of readability
        text = e.text

        # the `text` in different tags is processed in different ways...
        if tag == 'updated':
            value = pd.to_datetime(text, format=datetime_format)
        else:
            value = text

        # only if `text` is "something" and not an empty string after striping it of blank characteres...
        if text and (text.strip() != ''):

            # if the text contains a number...
            if text.isnumeric():

                # ...it is turned into a `float`
                value = float(value)

                # if the latter is actually an integer...
                if value.is_integer():

                    # ...conversion is performed
                    value = int(value)

            # ...is this element stored
            res[tag] = value

        # if in "recursive mode" and this element has children (`len(e)` is different from 0)...
        if recursive and len(e):
            sub_res = entry_to_dict(e)

            for k, v in sub_res.items():

                res[f'{tag} - {k}'] = v

    return res

# Cell
def entry_to_series(entry: etree.Element) -> pd.Series:

    return pd.Series(entry_to_dict(entry))